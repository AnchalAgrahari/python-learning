#A simple example class

class test:				#class name


#							fun() method

	#simple method
	def fun(self):				#fun: the name of the method, self: refer to the intence (object) of the class...........self allows to the instance's attributes and other methods.
		print("Hello")

#derive code
obj = test()					#object created, obj: A veeriable that holds the instance of the class.
obj.fun()						#obj: the object that we just created,   .fun(): class the mothod of the obj object
print()


#					init() method

class person:
	
	#inti method or construction;

	def __init__(self, name):					#self: current instance, name: a parameter that tske the value when object is created.
		self.name = name						#this assign the value of name to an instance variable(self.name)

	#sample mwtohd

	def say_hi(self):							#defines the metohd inside the class.
		print('Hello, my name is ', self.name)

p= person('Anchal')
p.say_hi()
p= person("Deepti")
p.say_hi()

print()


#							class variables

class students:

	stream = 'cse'

	def __init__(self, roll_no):

		self.roll_no = roll_no


a = students(11)
b = students(12)

print("I'm a student of stream: ",a.stream)
print("of roll no:",a.roll_no)
print(b.stream)
print(b.roll_no)

print()

#										()

class Person:
 
 #	constructor
	def __init__(self,name):
 		self.name = name
 	#to get name
	def get_name(self):
 		return self.name

 #to check if this person is employee

	def is_employee(self):
 		return False

# inherited or sub class (note person in bracket)
class Employee(Person):

	def is_employee(self):
		return 	True

#driver code
zsd = Person("Anchal")
print(zsd.get_name(), zsd.is_employee())

zsd = Employee("Shubham")
print(zsd.get_name(), zsd.is_employee())

print()

## 																								

class base1:
	def __init__(self):
		self.str1 = "Hyee"
		

class base2:
	def __init__(self):
		self.str2 = "Hii"
	
class derived(base1, base2):				#multiple inheeritence
	def __init__(self):
		#calling the constructor of base1 and base2 classes
		base1.__init__(self)
		base2.__init__(self)
		

	def printstrs(self):
		print(self.str1, self.str2)

obj = derived()
obj.printstrs()


####

class Base(object):

	#constructor now accept 'x'
	def __init__(self, x):
		self.x = x+100					#using x correctly

class Derived(Base):
	#construbctor with 'x' and 'y'
	def __init__(self, x, y):
		super().__init__(x)			#correct super() call
		self.y = y 
	
	def printXY(self):

		#base x isn't work here becaues super is used in construction
		print(self.x, self.y)


#deriver code
d = Derived(10, 20)
d.printXY()

#							



class School:
	def __init__(self, name, sub1, sub2, sub3):

	    self.name = name
		self.sub1 = sub1
	    self.sub2 = sub2
	    self.sub3 = sub3

Student = School("Anchal",34,56,78)
print("My name is : ", Student.name)
print("My  Englis score is : ", Student.sub1)
print("My Maths score is : ", Student.sub2)
print("My physic score is : ", Student.sub3)



####   Write a Python program to create a Student class with attributes name and age.


class Student:
      def __init__(self, name, age):
            self.name = name
            self.age = age


q = Student("Anchal", 20)
w = Student("Ash", 23)
print("My name is :",q.name, " and I'm", q.age, "year old")
print(w.name, w.age)

####Create a BankAccount class with a private variable balance.
#Add a method to deposit and withdraw money while keeping the balance secure.

class BankAccount:

      def __init__(self, deposit, withdraw):

            self.deposit = deposit 
            self.withdraw = withdraw

      def add__deposit(self, amount):

            self.deposit += amount

      def make_withdraw(self, amount):
            if amount > self.deposit:
                  print("Insufficient Bbalance")
            else:
                  self.deposit -= amount

account = BankAccount(8000, 00)

account.add__deposit(500)

print(account.deposit)


print("The amount in the account is :", account.deposit)
print("I want to withdraw 500 from account :",account.make_withdraw(500))
print("Now the amount in the account is  :",account.deposit)



######

print()
class Vehicle:
      def __init__(self, brand, speed, fule_type):
            self.brand = brand
            self.speed = speed
            self.fuel_type = fule_type

      def car_info(self):
            print(f"The [{self.brand}] has a speed limit of [{self.speed}] km/h and uses [{self.fuel_type}].")  #here we use 'f' after print so that we wr=ere able to use '{}' 

car1 = Vehicle('Mercdes', 1980, 'gasoline')
car1.car_info()

































































































































































































































































